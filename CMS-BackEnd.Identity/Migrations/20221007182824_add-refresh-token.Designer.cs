// <auto-generated />
using System;
using CMS_BackEnd.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CMS_BackEnd.Identity.Migrations
{
    [DbContext(typeof(CmsIdentityContext))]
    [Migration("20221007182824_add-refresh-token")]
    partial class addrefreshtoken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CMS_BackEnd.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "09dd9295-5477-4818-8755-f73bfa6b6fc9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7ff6431-7ff5-43fc-957c-96d2165d39be",
                            Email = "admin@mead-alsorani.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MEAD-ALSORANI.COM",
                            NormalizedUserName = "ADMIN@MEAD-ALSORANI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMBbFkMq/kAhNOdOUmWmaOnlFIS/6K+hAJTr9rsSLrFeK/L/NmI2BpFKZj54UDNxyQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "c6aa7ca3-8998-4264-a746-a4fd27efd1e2",
                            TwoFactorEnabled = false,
                            UserName = "admin@mead-alsorani.com"
                        },
                        new
                        {
                            Id = "8afb94e5-e55e-4479-9b40-8116628c3c82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42235ced-949a-40b8-95a9-23ad0a31cffe",
                            Email = "manager@mead-alsorani.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@MEAD-ALSORANI.COM",
                            NormalizedUserName = "MANAGER@MEAD-ALSORANI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEApv9tpc6zqcpkNK0ZoWvupZiKXKjrCYjLM6ck9uAOcS1Nd0wWYQHiAHkxYOWeUDEQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "085ea196-a86f-469c-b435-29834c3ac34d",
                            TwoFactorEnabled = false,
                            UserName = "manager@mead-alsorani.com"
                        },
                        new
                        {
                            Id = "079b9eeb-d67c-4f53-b14e-cbbf0739e2bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c78b28de-a43d-40f4-8e3e-52d1440cce4b",
                            Email = "accountant@mead-alsorani.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "Accountant",
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNTANT@MEAD-ALSORANI.COM",
                            NormalizedUserName = "ACCOUNTANT@MEAD-ALSORANI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOq+zgzMZbHJGvTr8gBSXpI8il2u7EEEwhY5A9JV0mbWol1OEjRCVo30c2gyRmK4Tw==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "8217d443-9f4a-4d33-9875-df18552be324",
                            TwoFactorEnabled = false,
                            UserName = "accountant@mead-alsorani.com"
                        },
                        new
                        {
                            Id = "4fb55069-1031-49b9-9f43-ee196fb67650",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c6ed9b9-f4a6-402e-85ac-27a9dc378403",
                            Email = "reciptionist@mead-alsorani.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "Reciptionist",
                            LockoutEnabled = false,
                            NormalizedEmail = "RECIPTIONIST@MEAD-ALSORANI.COM",
                            NormalizedUserName = "RECIPTIONIST@MEAD-ALSORANI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENeAgy2PBDP6PzHkTWJ8Wc/ambHJWhBOhzABrinPYDO0Ix2a5ze1TPhl4To+E4Kw7Q==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2abae6bd-857a-4c60-ae36-238a93f38698",
                            TwoFactorEnabled = false,
                            UserName = "reciptionist@mead-alsorani.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8a0cc8f0-7259-4684-8b1f-9af5ee16e3bd",
                            ConcurrencyStamp = "0e93fc26-6b9f-4ee7-98db-07fee1dcf326",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "6ebd984a-45cf-4fcd-b48d-ad6ae71846b1",
                            ConcurrencyStamp = "5241c44b-5eff-4958-8a99-fc5634a154b0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "252c11a8-7035-423e-be2c-85b006a8a8c4",
                            ConcurrencyStamp = "1e6d6f82-e1dd-45e9-b2a9-18fbcf0f25b9",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "dde1228b-9b59-42eb-90cb-a480ff5910a7",
                            ConcurrencyStamp = "7da8a806-842a-417a-b66e-2d3772a9b551",
                            Name = "Reciptionist",
                            NormalizedName = "RECIPTIONIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8afb94e5-e55e-4479-9b40-8116628c3c82",
                            RoleId = "8a0cc8f0-7259-4684-8b1f-9af5ee16e3bd"
                        },
                        new
                        {
                            UserId = "09dd9295-5477-4818-8755-f73bfa6b6fc9",
                            RoleId = "6ebd984a-45cf-4fcd-b48d-ad6ae71846b1"
                        },
                        new
                        {
                            UserId = "079b9eeb-d67c-4f53-b14e-cbbf0739e2bc",
                            RoleId = "252c11a8-7035-423e-be2c-85b006a8a8c4"
                        },
                        new
                        {
                            UserId = "4fb55069-1031-49b9-9f43-ee196fb67650",
                            RoleId = "dde1228b-9b59-42eb-90cb-a480ff5910a7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CMS_BackEnd.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CMS_BackEnd.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_BackEnd.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CMS_BackEnd.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
