// <auto-generated />
using System;
using CMS_BackEnd.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CMS_BackEnd.Identity.Migrations
{
    [DbContext(typeof(CmsIdentityContext))]
    [Migration("20220921205507_InitIdentity")]
    partial class InitIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CMS_BackEnd.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "09dd9295-5477-4818-8755-f73bfa6b6fc9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87208784-c0ce-4b9f-842f-2822c80d9dbb",
                            Email = "admin@mead-alsorani.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MEAD-ALSORANI.COM",
                            NormalizedUserName = "ADMIN@MEAD-ALSORANI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM5H4Ibk8FUnIY88quRnAANF6qLzCBbbG2tcPtme1HvrpwhoZJngLoPNKSjFIN6bkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d46d64b6-6b05-4a22-b4fc-e09c8b0c0a68",
                            TwoFactorEnabled = false,
                            UserName = "admin@mead-alsorani.com"
                        },
                        new
                        {
                            Id = "8afb94e5-e55e-4479-9b40-8116628c3c82",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "493e1aa9-07ac-4274-9026-badf415cceee",
                            Email = "manager@mead-alsorani.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@MEAD-ALSORANI.COM",
                            NormalizedUserName = "MANAGER@MEAD-ALSORANI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPtiI7ZkUPjuEGg/rnnQJqqTMT5FTsxoOqwLkqdmW3ZjNlh2zaPojv2xqYwFpEWZgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb206557-5794-4264-a965-b8b6d5cebba3",
                            TwoFactorEnabled = false,
                            UserName = "manager@mead-alsorani.com"
                        },
                        new
                        {
                            Id = "079b9eeb-d67c-4f53-b14e-cbbf0739e2bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cfab0b8-2041-47e6-a676-1714d26d8c43",
                            Email = "accountant@mead-alsorani.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "Accountant",
                            LockoutEnabled = false,
                            NormalizedEmail = "ACCOUNTANT@MEAD-ALSORANI.COM",
                            NormalizedUserName = "ACCOUNTANT@MEAD-ALSORANI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN8SDEzDUM5euo90iqdaPZB69ODX9e3ck3LwzMeXGIInXidPpYlhRG0uIddnlSw1Lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8eced4a3-d47e-4e18-9fdb-b6fdf65f2473",
                            TwoFactorEnabled = false,
                            UserName = "accountant@mead-alsorani.com"
                        },
                        new
                        {
                            Id = "4fb55069-1031-49b9-9f43-ee196fb67650",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9164922-7909-4f7b-874a-ab671b2cb1b6",
                            Email = "reciptionist@mead-alsorani.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "Reciptionist",
                            LockoutEnabled = false,
                            NormalizedEmail = "RECIPTIONIST@MEAD-ALSORANI.COM",
                            NormalizedUserName = "RECIPTIONIST@MEAD-ALSORANI.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMwf7A5My6jYLXj/gxLL1QHqcFBKCMGcrUPD/ghYTP2VtwLltI3q6PH+ryvNqq9prQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1475d71e-e082-4e64-b13c-b50d5e839a91",
                            TwoFactorEnabled = false,
                            UserName = "reciptionist@mead-alsorani.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8a0cc8f0-7259-4684-8b1f-9af5ee16e3bd",
                            ConcurrencyStamp = "c4f3d4b0-707d-4321-808b-79208b4d04dc",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "6ebd984a-45cf-4fcd-b48d-ad6ae71846b1",
                            ConcurrencyStamp = "3e9690ec-5eb7-43bd-8388-ed94364641f5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "252c11a8-7035-423e-be2c-85b006a8a8c4",
                            ConcurrencyStamp = "e1bff667-7819-4e1f-8243-9d535bc15a8b",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "dde1228b-9b59-42eb-90cb-a480ff5910a7",
                            ConcurrencyStamp = "82bc183b-b8ee-4b48-bbed-348217cc2701",
                            Name = "Reciptionist",
                            NormalizedName = "RECIPTIONIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8afb94e5-e55e-4479-9b40-8116628c3c82",
                            RoleId = "8a0cc8f0-7259-4684-8b1f-9af5ee16e3bd"
                        },
                        new
                        {
                            UserId = "09dd9295-5477-4818-8755-f73bfa6b6fc9",
                            RoleId = "6ebd984a-45cf-4fcd-b48d-ad6ae71846b1"
                        },
                        new
                        {
                            UserId = "079b9eeb-d67c-4f53-b14e-cbbf0739e2bc",
                            RoleId = "252c11a8-7035-423e-be2c-85b006a8a8c4"
                        },
                        new
                        {
                            UserId = "4fb55069-1031-49b9-9f43-ee196fb67650",
                            RoleId = "dde1228b-9b59-42eb-90cb-a480ff5910a7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CMS_BackEnd.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CMS_BackEnd.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS_BackEnd.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CMS_BackEnd.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
